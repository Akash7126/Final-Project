@model List<Online_Exam_System.Models.Question>

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Online Exam Quiz</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
        }

        .quiz-container {
            max-width: 863px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
            
            
        }

        .question {
            font-size: 18px;
            margin-bottom: 10px;
        }

        .answers {
            display: flex;
            flex-direction: column;
        }

        .answer {
            margin: 5px 0;
        }

        .btn-submit {
            background-color: #007BFF;
            color: #fff;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .answer-option {
            display: inline-block;
            margin-right: 10px; /* Add spacing between answer options */
        }

        .answer-option1 {
            display: inline-block;
            margin-right: 10px; /* Add spacing between answer options */
        }

            .answer-option1 input[type="checkbox"] {
                vertical-align: middle;
                margin-right: 5px; /* Add spacing between checkboxes and labels */
            }

        .answer-option input[type="radio"] {
            vertical-align: middle;
            margin-right: 5px; /* Add spacing between radio buttons and labels */
        }

        .text-right {
            margin-left: 18px;
        }

        .text-left {
            margin-left: 544px;
        }

        

/*               * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}*/

/*html, body {
  height: 100%;
  width: 100%;
}*/

/*body {
  background: black;
  display: flex;
  justify-content: center;
  align-items: center;
}*/

.clock {
  height: 12vh;
  color: white;
  font-size: 11vh;
  font-family: sans-serif;
  line-height: 12.4vh;
  display: flex;
  position: relative;
  /*background: green;*/
  overflow: hidden;
}

.clock::before, .clock::after {
  content: '';
  width: 7ch;
  height: 3vh;
  background: linear-gradient(to top, transparent, black);
  position: absolute;
  z-index: 2;
}

.clock::after {
  bottom: 0;
  background: linear-gradient(to bottom, transparent, black);
}

.clock > div {
  display: flex;
}

.tick {
  line-height: 17vh;
}

.tick-hidden {
  opacity: 0;
}

.move {
  animation: move linear 1s infinite;
}

        .clock.move {
            background: black;
        }

        .fixed {
            overflow: hidden;
            background-color: #000;
            position: fixed;
            top: 0;
            width: 100%;
            
        }



        -webkit-user-select: none; /* Chrome all and Safari all */
        -moz-user-select: none; /* Firefox all */
        -ms-user-select: none; /* IE 10+ */
        user-select: none;
        </style>


  


</head>
<body>
    


    <nav class="fixed">
            <div class="clock">
                <div class="hours">
                    <div class="first">
                        <div class="number num-0"></div>
                    </div>
                    <div class="second">
                        <div class="number num-1"></div>
                    </div>
                </div>
                <div class="tick">:</div>
                <div class="minutes">
                    <div class="first">
                        <div class="number num-2"></div>
                    </div>
                    <div class="second">
                        <div class="number num-3"></div>
                    </div>
                </div>
                <div class="tick">:</div>
                <div class="seconds">
                    <div class="first">
                        <div class="number num-4"></div>
                    </div>
                    <div class="second infinite">
                        <div class="number num-5"></div>
                    </div>
                </div>
            </div>
    </nav>

    
    <div class="quiz-container">

        @if (ViewBag.IsExamOver)
        {
            <form asp-controller="Exam" asp-action="GiveExam" method="post">
                <h2 style="color:red">Your Exam is Over</h2>
                <div class="row">
                    <div class="col-md-4">
                        <button  type="submit" class="btn btn-block btn-info btn-flat">Back</button>
                    </div>
                
                </div>

                
           </form>

        }

        else
        {
        <h5 style="text-align:center;"><b>University of Information Technology & Sciences(UITS)</b></h5>
        <h6 style="text-align:center"><b>Faculty of Science And Engineering</b></h6>

            @foreach (var exam in ViewBag.DistinctExams)
            {
            <h6 style="text-align:center"><b>Department of @exam.DepartmentName</b></h6>
            <h6 style="text-align:center"><b>Course Title: @exam.CourseTittle</b></h6>
            <h6 style="text-align:center"><b>Course Code: @exam.CourseCode</b></h6>

            }

        <h7 class="text-right"><b>Total Mark: @ViewBag.TotalMarks</b></h7>
        <h7 class="text-left"> <b>Time: @ViewBag.Time</b></h7>

            @using (Html.BeginForm("GiveStudentAnswer", "StudentAnswer", FormMethod.Post, new { id = "quizForm" }))
            {
            <ol type="1">
                    @foreach (var question in Model)
                    {
                    <div class="question">
                        <p>
                    <li>@Html.Raw(question.QuestionDescription)</li>
                    </p>
                    </div>
                    <ol type="a">
                            @foreach (var answer in question.Answers)
                            {
                            <li>
                                    @if (question.QuestionTypeId == 1)
                                    {
                                    <div class="answers answer-option">
                                        <input type="radio" name="selectedAnswerIds[@question.QuestionId]" value="@answer.AnswerId">
                                        <input type="hidden" name="questionIds[@answer.AnswerId]" value="@question.QuestionId">
                                        <label>
                                                @Html.Raw(answer.AnswerText)
                                        </label>
                                    </div>
                                    }
                                    else if (question.QuestionTypeId == 3)
                                    {
                                    <!-- Display radio buttons dynamically based on values in the Answer table -->
                                    <div class="answers answer-option">
                                        <input type="radio" name="selectedAnswerIds[@question.QuestionId]" value="@answer.AnswerId">
                                        <input type="hidden" name="questionIds[@answer.AnswerId]" value="@question.QuestionId">
                                        <input type="hidden" name="isAnswerSelected[@answer.AnswerId]" value="false">
                                    <label>
                                                @Html.Raw(answer.AnswerText)
                                    </label>
                                    </div>
                                    }
                                    else if (question.QuestionTypeId == 2)
                                    {
                                    <div class="answers answer-option1">
                                        <input type="checkbox" name="selectedAnswerIds[@question.QuestionId][]" value="@answer.AnswerId">
                                        <input type="hidden" name="questionIds[@answer.AnswerId]" value="@question.QuestionId">
                                        <input type="hidden" name="isAnswerSelected[@answer.AnswerId]" value="false">
                                        <label>
                                                @Html.Raw(answer.AnswerText)
                                        </label>
                                    </div>
                                    }
                            </li>
                            }
                    </ol>
                    }
            </ol>
            <input type="hidden" name="totalmark" value="@ViewBag.TotalMarks">
            <input type="hidden" name="totalquestion" value="@ViewBag.TotalQuestions">
            <input type="hidden" name="examId" value="@ViewBag.NewExamid">
            <input type="hidden" name="teacherId" value="@ViewBag.TeacherId">
            <button class="btn-submit" type="submit">Submit Quiz</button>
            }


        <script>
            // Function to submit the form when the end time is reached
            function submitFormOnEndTime() {
                var examEndTime = new Date('@ViewBag.ExamEndTime'); // Get the exam end time from Razor

                var refreshInterval = examEndTime - new Date(); // Calculate the time remaining

                if (refreshInterval <= 0) {
                    // Submit the form if the end time has passed
                    document.getElementById('quizForm').submit(); // Use the correct ID of your form
                } else {
                    setTimeout(submitFormOnEndTime, refreshInterval); // Submit the form when the end time is reached
                }
            }

            // Call the submitFormOnEndTime function
            submitFormOnEndTime();
        </script>



        <!-- Your existing HTML code -->
            @if (!ViewBag.IsExamOver)
            {
            <script>
                document.addEventListener('contextmenu', function (e) {
                    e.preventDefault();
                    alert('Do not copy it.');
                });

                document.addEventListener('keydown', function (e) {
                    if (e.ctrlKey || e.metaKey) {
                        alert('Copying using keyboard shortcuts is not allowed.');
                        e.preventDefault();
                    }
                });

                // Function to show an alert when the user switches tabs or the window loses focus
                document.addEventListener('visibilitychange', handleVisibilityChange);
                window.addEventListener('blur', handleVisibilityChange);

                // Function to show an error message when clicking outside the quiz-container
                document.addEventListener('click', function (e) {
                    var quizContainer = document.querySelector('.quiz-container');

                    if (!quizContainer.contains(e.target)) {
                        var confirmation = confirm('Clicking outside the quiz area is not allowed. Do you want to go to another view?');

                        if (confirmation) {
                            // Redirect to another view
                            window.location.href = '/Exam/ForCheat'; // Replace with the actual URL
                        }
                    }
                });

                function handleVisibilityChange() {
                    if (document.hidden) {
                        alert('Switching tabs or losing focus is not allowed.');
                        // Redirect to another view
                        window.location.href = '/Exam/ForCheat'; // Replace with the actual URL
                    }
                }
            </script>
            }

        <!-- Your existing HTML code continues -->
        }


    </div>

    
    <script>
        // Disable the back button
        history.pushState(null, null, location.href);
        window.onpopstate = function () {
            history.go(1);
        };
    </script>




    <script>
        // Function to update live remaining time
        function updateLiveRemainingTime() {
            var currentTime = new Date();
            var examEndTime = new Date('@ViewBag.ExamEndTime'); // Get the exam end time from Razor

            var timeDifference = examEndTime - currentTime;

            if (timeDifference > 0) {
                var hours = Math.floor(timeDifference / (60 * 60 * 1000));
                var minutes = Math.floor((timeDifference % (60 * 60 * 1000)) / (60 * 1000));
                var seconds = Math.floor((timeDifference % (60 * 1000)) / 1000);

                // Update the clock numbers
                document.querySelector('.num-0').innerText = Math.floor(hours / 10);
                document.querySelector('.num-1').innerText = hours % 10;
                document.querySelector('.num-2').innerText = Math.floor(minutes / 10);
                document.querySelector('.num-3').innerText = minutes % 10;
                document.querySelector('.num-4').innerText = Math.floor(seconds / 10);
                document.querySelector('.num-5').innerText = seconds % 10;
            } else {
                document.getElementById('liveRemainingTime').innerText = "Exam Over";
            }
        }

        setInterval(updateLiveRemainingTime, 1000);
    </script>
    
</body>
</html>